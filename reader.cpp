/////////////////////////////////////////////////////////////////////////////////////////
#include "reader.hpp"
/////////////////////////////////////////////////////////////////////////////////////////
#define find( cont, expr ) std::find( cont.begin(), cont.end(), expr )
/////////////////////////////////////////////////////////////////////////////////////////
Reader::Reader( const string& name )
        :
        name( name )
{}
/////////////////////////////////////////////////////////////////////////////////////////
const set< Book >& Reader::get_books() const
{
    return taken_books;
}
/////////////////////////////////////////////////////////////////////////////////////////
const Book& Reader::get_book_cref( const string& name_book ) const
{
    auto ret = find( taken_books, name_book );
    
    if( ret == taken_books.end() )
    {
        std::cout
            << "Book "
            << name_book
            << " not found!";
        return *taken_books.begin();
    }
    
    return *ret;
}
/////////////////////////////////////////////////////////////////////////////////////////
void Reader::add_book( const Book& book )
{
    taken_books.emplace( book );
}
/////////////////////////////////////////////////////////////////////////////////////////
Book Reader::get_book( const string& name_book )
{
    auto book = find( taken_books, name_book );
    
    if( book == taken_books.end() )
    {
        std::cout
            << "Book "
            << name_book
            << " not found!";
        return {};
    }
    
    auto ret = *book;
    
    taken_books.erase( book );
    
    return ret;
}
/////////////////////////////////////////////////////////////////////////////////////////
bool Reader::contain( const string& name_book )
{
    return find( taken_books, name_book ) != taken_books.end();
}
/////////////////////////////////////////////////////////////////////////////////////////
const string& Reader::get_name() const
{
    return name;
}
/////////////////////////////////////////////////////////////////////////////////////////